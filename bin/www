#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-sympozer:server');
var http = require('http');
const mongoose = require('mongoose');
/*const persons = require('../namesandemail');
const UserMetier = require('../metiers/UserMetier');
const UserAuthorizeToVoteMetier = require('../metiers/UserAuthorizeToVoteMetier');

const userMetier = new UserMetier();
const userAuthorizeToVoteMetier = new UserAuthorizeToVoteMetier();*/

let portServer;
let hostMongodb;
let portMongodb;
process.argv.forEach(function (val, index, array) {
  if (index === 2) {
    portServer = normalizePort(val);
  }

  if (index === 3) {
    hostMongodb = val;
  }

  if (index === 4) {
    portMongodb = normalizePort(val);
  }
});

if (!portServer || !portMongodb || !hostMongodb) {
  process.exit(1);
}

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Get port from environment and store in Express.
 */
//var port = normalizePort(process.env.PORT || '3000');
app.set('port', portServer);
app.set('portMongodb', portMongodb);
mongoose.connect('mongodb://' + hostMongodb + ':' + portMongodb + '/server_sympozer', function (err) {
  if (err) {
    process.exit(1);
  }
  else {
    /**
     * Listen on provided port, on all network interfaces.
     */
    //importData(persons);

    server.listen(portServer);
    console.log('server listning on port : ' + portServer);
    server.on('error', onError);
    server.on('listening', onListening);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
/*
function importData(persons) {
  const person = persons[0];
  if (!person) {
    return false;
  }

  persons.splice(0, 1);

  const name = person['Name:'];
  const firstname = person['First Name'];
  const email = person['Email:'];

  if (!email || email.length === 0) {
    return importData(persons);
  }

  if (!name || name.length === 0) {
    return importData(persons);
  }

  if (!firstname || firstname.length === 0) {
    return importData(persons);
  }

  //Create user account
  userAuthorizeToVoteMetier.get(email)
    .then((userAuthorizeToVote) => {
      if (userAuthorizeToVote) {
        return importData(persons);
      }
      userAuthorizeToVoteMetier.add(email)
        .then(() => {
          return importData(persons);
        })
        .catch(() => {
          return importData(persons);
        });
    }).catch((error) => {
    console.log(error);
    return importData(persons);
  });
}*/