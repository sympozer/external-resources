#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-sympozer:server');
var http = require('http');
const mongoose = require('mongoose');

let portServer;
let portMongodb;
process.argv.forEach(function (val, index, array) {
  console.log(index, val);
  if (index === 2) {
    portServer = normalizePort(val);
  }

  if (index === 3) {
    portMongodb = normalizePort(val);
  }
});

if (!portServer || !portMongodb) {
  process.exit(1);
}

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Get port from environment and store in Express.
 */
//var port = normalizePort(process.env.PORT || '3000');
app.set('port', portServer);
app.set('portMongodb', portMongodb);
mongoose.connect('mongodb://127.0.0.1:' + portMongodb + '/server_sympozer', function(err){
  if(err){
    console.log(err);
    process.exit(1);
  }
  else{
    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(portServer);
    server.on('error', onError);
    server.on('listening', onListening);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
